// ==================== 中药分割模块 ====================
// 煎法说明.split("，")  // 把炼丹步骤拆成说明书 📜
// 配伍禁忌.split("/")  // 危险关系切割机 ✂️
// ⚠️虎山老药师：实际用药禁止自行分装

// 助消化药类字符串
const heightenDigestion = "山楂,神曲,麦芽,谷芽,鸡矢藤,鸡内金,蜘蛛香,沙棘,💥焦山楂,💥焦神曲,💥焦麦芽,❌山炒楂,❌神六曲"; // 助消化, 字符串, 消化药类+焦三仙+错误药名
const hd = "山楂,神曲,麦芽,谷芽,鸡矢藤,鸡内金,蜘蛛香,沙棘-,💥焦山楂,💥焦神曲,💥焦麦芽,❌山炒楂,❌神六曲"; // 元组分割示例
const hdLines = "💥炒山楂\n💥六神曲\n💥麦芽\n❌山炒楂\r❌神六曲"; // 换行符分割示例

console.log(heightenDigestion, "💫分割前");
console.log(heightenDigestion.split(","), "💨分割后"); // 字符串分割为全部列表

console.log("-".repeat(25), "以下是分割+切片-----------------");
console.log(heightenDigestion.split(",", 8).slice(0, 8), "🛹消食化积药"); // 字符串指定分割次数为列表+切片
console.log(heightenDigestion.split(",", 11).slice(8, 11), "🌠焦三仙"); // 字符串指定分割为列表+切片
console.log(heightenDigestion.split(",").slice(11), "❌错误名"); // 字符串分割为列表+切片

console.log("-".repeat(25), "以下是元组分割-----------------");
const [hd1, sep, hd2] = hd.split("-"); // 一次性分割成数组片段1+分隔符+片段2（但 JavaScript 的 split 不会保留分隔符）
console.log(hd1, "1️⃣片段1"); // 片段1（注意：JavaScript 的 split 不会保留分隔符）
console.log(sep, "2️⃣分隔符"); // 注意：这里 sep 是 undefined，因为 split 不会返回分隔符
console.log(hd2, "3️片段2"); // 片段2

// 模拟元组分割（JavaScript 的 split 不会保留分隔符，需要手动处理）
const hdTuple = hd.split("-", 2); // 只分割一次
console.log(hdTuple[0], "1️⃣片段1");
console.log("-", "2️⃣分隔符");
console.log(hdTuple[1], "3️片段2");

console.log("-".repeat(25), "以下是 splitlines 换行符分割和指定分割区别--------");
console.log(hdLines.split(/\r?\n/), "🈹换行全部分割"); // 全部换行符分割（兼容 \n 和 \r\n）
console.log(hdLines.split('\n')); // 指定 \n 分割
console.log(hdLines.split('\r')); // 指定 \r 分割
        
        
// ===========================================================================JS
// [中医极客] 药材数据库 JSON 结构规范
// 
// 本数据结构采用《中国药典》2020版标准，所有术语均为技术隐喻：
//   - "性味归经" → 类属性约束
//   - "最大剂量" → API调用限制
//   - "编程寄语" → 设计模式建议
//
// 技术交流请通过GitHub Issues，严禁医疗用途
// ===========================================================================JS
/*

{
  "海底珍珠": {
    "技术分类": [
      "服务网格定海珠",     # 治Istio流量乱流
      "日志深海稳压器",     # 防ELK日志海啸
      "数据库龙宫锁"       # 抗MySQL锁抖动
    ],
    "系统特性": "甘咸寒",   # 带"咸"字，专治海量数据
    "作用域": ["ServiceMesh", "Database", "Observability"],
    "定海阈值": "1EB",     # 原"最大剂量"（EB级数据镇压）
    "基础功能": "稳定微服务调用链，防止日志洪流冲垮监控",
    "高阶用法": "深海数据仓库（Data Lake）防潮方案",
    "架构建议": "如同给Kafka加定海珠——既要抗洪峰，又要防海妖（Dead Letter）",
    "龙宫禁忌": "🌊 海啸Alert: 
- 未筑基（未做服务降级）者禁用！
- 需配合珊瑚礁（CircuitBreaker）使用
# 著名海难：某厂日志洪流冲垮Splunk（2024台风季）",
    "龙宫科技": {
      "珍珠层": "比OLAP更快的分层存储",
      "蚌精算法": "自适应的流控策略"
    }
  }
}

*/
// ===========================================================================JS
// 数据协议声明：
// 1. 本JSON结构属技术演示，所有中医术语均为文化隐喻
// 2. 实际应用需遵守MIT协议附加条款
// 3. 企业合作请通过GitHub邮箱联系
// 
// 冷溪虎山数字本草实验室 © 2025
// ===========================================================================JS
