# ==================== 财务交互模块 ====================
# input("请输入金额：")  # 会计小姐姐的温柔催款 💁
# help(做账技巧)  # 召唤ERP老仙在线答疑 🧙
# ⚠️ERP_冷溪虎山：输错金额会被钉在耻辱柱上

# 定义变量
a = 15
b = 4

# 加法
print("加法:", a + b)        # 15 + 4 = 19

# 减法
print("减法:", a - b)        # 15 - 4 = 11

# 乘法
print("乘法:", a * b)        # 15 * 4 = 60

# 除法
print("除法:", a / b)        # 15 / 4 = 3.75

# 模（取余数）
print("模（取余）:", a % b)  # 15 % 4 = 3

print("\n====下面是复合赋值运算符（增强赋值）(会更改之前的变量)====🚀🚀")

# 自增（a 加 1）
a += 1
print("自增后 a:", a)        # 15 + 1 = 16

# 自减（a 减 1）
a -= 1
print("自减后 a:", a)        # 16 - 1 = 15

# a 加 b（使用 += 运算符）
a += b
print("a += b 后 a:", a)     # 15 + 4 = 19

# a 减 b（使用 -= 运算符）
a -= b
print("a -= b 后 a:", a)     # 19 - 4 = 15

# a 乘 b（使用 *= 运算符，等价于 a = a * b）
a *= b  # a = 15 * 4
print("a *= b 后 a:", a)     # 15 * 4 = 60

# a 除 b（使用 /= 运算符，等价于 a = a / b）
a /= b  # a = 60 / 4
print("a /= b 后 a:", a)     # 60 / 4 = 15.0

# a 模 b（使用 %= 运算符，等价于 a = a % b）
a %= b  # a = 15.0 % 4 → 浮点数取余，结果为 3.0
print("a %= b 后 a:", a)     # 15.0 % 4 = 3.0

print("\n=== 以下是更多的复合赋值运算符（增强赋值）===🧬🧬")
# 定义变量
x = 15
y = 4

# //= （整除后赋值：x = x // y，取商的整数部分）
x //= y  # x = 15 // 4 → 3
print("x //= y 后 x:", x)  # 输出：x //= y 后 x: 3

# %= （取模后赋值：x = x % y，取余数）
x %= y  # x = 3 % 4 → 3
print("x %= b 后 x:", x)   # 输出：x %= b 后 x: 3

# **= （幂运算后赋值：x = x ** y，x 的 y 次方）
x **= y  # x = 3 ** 4 → 81
print("x **= y 后 x:", x)  # 输出：x **= y 后 x: 81

# &= （按位与后赋值：x = x & y）
x &= y  # x = 81 & 4
# 81 的二进制: 1010001
#  4 的二进制: 0000100
# 按位与结果: 0000000 → 0
print("x &= y 后 x:", x)   # 输出：x &= y 后 x: 0

# |= （按位或后赋值：x = x | y）
x |= y  # x = 0 | 4
# 0:  0000000
# 4:  0000100
# 按位或结果: 0000100 → 4
print("x |= b 后 x:", x)   # 输出：x |= b 后 x: 4

# ^= （按位异或后赋值：x = x ^ y）
x ^= y  # x = 4 ^ 4
# 4:  0000100
# 4:  0000100
# 异或结果: 0000000 → 0
print("x ^= b 后 x:", x)   # 输出：x ^= b 后 x: 0

# <<= （左移后赋值：x = x << y，x 的二进制左移 y 位）
x <<= y  # x = 0 << 4 → 0
print("x <<= y 后 x:", x)  # 输出：x <<= y 后 x: 0

# >>= （右移后赋值：x = x >> y，x 的二进制右移 y 位）
x >>= y  # x = 0 >> 4 → 0
print("x >>= y 后 x:", x)  # 输出：x >>= y 后 x: 0

print("\n=== 以下是比较运算符 和 逻辑运算符 ====🎵🎵🎵")
# ========== 以下是 Python 的比较运算符 和 逻辑运算符 ==========
x = 15
y = 4

# ======================
# 一、比较运算符（Comparison Operators）
# ======================

# <      小于
print("x < y :", x < y)   # 15 < 4 → False

# >      大于
print("x > y :", x > y)   # 15 > 4 → True

# <=     小于或等于
print("x <= y :", x <= y) # 15 <= 4 → False

# >=     大于或等于
print("x >= y :", x >= y) # 15 >= 4 → True

# ==     等于（值相等）
print("x == y :", x == y) # 15 == 4 → False

# !=     不等于（值不相等）
print("x != y :", x != y) # 15 != 4 → True

print("\n逻辑运算符（Logical Operators）—— 与或非🌈🌈")
# ======================
# 二、逻辑运算符（Logical Operators）—— 与或非
# ======================

# and    与：两个条件都为 True，结果才为 True
print("x > 10 and y < 5 :", x > 10 and y < 5)  # True and True → True

# or     或：任意一个为 True，结果就为 True
print("x < 10 or y < 5 :", x < 10 or y < 5)    # False or True → True

# not    非：取反
print("not (x > y) :", not (x > y))            # not (True) → False
print("not (x == y) :", not (x == y))          # not (False) → True
# Python
help(print)  # 查看 print 函数的帮助信息
# help(list)   # 查看 list 类型的帮助信息

name = input("请输入你的姓名: ")
print(f"你好, {name}!\n")


        
        
# ===========================================================================PY
# [中医极客] 药材数据库 JSON 结构规范
# 
# 本数据结构采用《中国药典》2020版标准，所有术语均为技术隐喻：
#   - "性味归经" → 类属性约束
#   - "最大剂量" → API调用限制
#   - "编程寄语" → 设计模式建议
#
# 技术交流请通过GitHub Issues，严禁医疗用途
# ===========================================================================PY
"""

{
  "荆芥": {
    "技术宇宙": {
      "区块链": "智能合约解表丸（专治Solidity的`require()`风寒）",
      "AI炼丹": "梯度下降发汗剂（反向传播时毛孔全开）",
      "运维玄学": "K8s Pod麻疹透疹膏（Service Mesh级排毒）",
      "硬件魔法": "治愈SSD的冷数据关节炎（NVMe协议发汗法）"
    },
    "跨界药效": {
      "发汗原理": "如同`sudo rm -rf /tmp/*`后的通透感",
      "透疹本质": "相当于在CNN卷积层插入了`tf.nn.dropout`",
      "止痒黑科技": "比`Ctrl+F5`更彻底的缓存刷新术"
    },
    "脉象狂想": {
      "浮脉": "类似Redis的QPS突然飙高（但无`slowlog`）",
      "滑脉": "如同`dd if=/dev/zero`灌入硬盘的丝滑",
      "结代脉": "Kafka消息队列的`acks=all`心跳漏跳"
    },
    "舌象朋克": {
      "舌边齿痕": "被PM用JIRA反复摩擦的痕迹",
      "舌下淤血": "Tech Lead连续三年没涨薪的微循环障碍"
    },
    "禁忌风暴": {
      "阴虚慎服": "长期在`/proc/cpuinfo`里`grep 'bugs'`的工程师",
      "过敏体质": "对`NaN === NaN`返回`false`会起荨麻疹的人"
    },
    "老中医暴论": {
      "量子纠缠": "荆芥炭（烧焦版）可治疗量子计算的退相干",
      "赛博朋克": "将药渣敷在Raspberry Pi上可增强Wi-Fi信号",
      "教主顿悟": "『所有分布式系统问题，皆因表邪未解！』"
    },
    "玄学副作用": {
      "时空扭曲": "服用后`time curl`显示TLS握手时间倒流",
      "观测者效应": "`console.log()`的输出会变成甲骨文"
    },
    "开源暴击": "**WTFPL License**（Witness The Furious Power of 荆芥）"
  }
}


"""
# ===========================================================================PY
# 数据协议声明：
# 1. 本JSON结构属技术演示，所有中医术语均为文化隐喻
# 2. 实际应用需遵守MIT协议附加条款
# 3. 企业合作请通过GitHub邮箱联系
# 
# 冷溪虎山数字本草实验室 © 2025
# ===========================================================================PY
